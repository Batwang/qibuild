Goals:
 - no need to specify a toolchain file to build with system libraries, toolchain file is needed only to change the compiler when *cross-compiling*.
 - be standard as much as possible. (generated *Config.cmake should be selfcontained)
 - use standard path for *Config.cmake

TODO:
 - rewrite stage_*
 - convert SDK_DIR => CMAKE_MODULE_PATH
 - finish qi_use_lib


Plateform to support:


Feature we want:
 - native build on linux/osx
 - toolchain for linux32, linux64, win32, win64, osx, nao-geode, nao-atom


Mixed config:
 - mostly native lib. but uncommon lib are compiled

How to generate a toolchain:

nao-geode, nao-atom:
  naogentoo, we create a complete rootfs

linux32, linux64:
  - use naogentoo ?
  - use "debootstrap" like functionnality?

osx:
  - use nao-gentoo ?

win32/win64:
  - use naogentoo for msys?
  - use sh scripts?
  - use qibuild with rulez for autotools and standard cmake programs?
  - how to handle VS build?

what about paludis?
what about gentoo prefix?



QiToolchain:

  #create a new .<name>.toolchain file, with basic configuration
  # rootfsfolder: the folder where to create a rootfs, or empty to have a native toolchain
  qitoolchain create <name> <rootfsfolder>

  #try to get new binaries from buildfarm
  qitoolchain update

  #
  qitoolchain get <

Native toolchain:
=================

#maybe the native toolchain is created by default, and only install is necessary for package not present on the system.
#create a toolchain named native (without specific rootfs)
qitoolchain create native

#because the one on my system is fucked'up
qitoolchain install -t native boost
qitoolchain install -t native zeromq

#then
qibuild

Nao-Gentoo toolchain:
=====================
qitoolchain create nao-gentoo http://toolchain/nao-gentoo-1.10-rootfs.tgz

#then
qibuild -t nao-gentoo

For each package generate a "devel" and a "runtime" package.


How to create a toolchain:
use qitoolchain in the native env?
schroot under linux32/linux64

native build on windows/osx



What do we have:
individual package for "home build" toolchain (osx. windows)

qitoolchain fetch from the server new package.


Native (linux):
Provide recipes for not so common, or old libraries ?:
  zeromq
  protobuf

Provide deb, pkgbuild ?


Linux32/Linux64/NaoGeode/NaoGentoo:
  give a full rootfs (let's it be the same on a maximum of plateform)
  what do we include in the rootfs?

  all package including qi?
  a simple devel set , and a simple runtime set?

  how can we distribute our software with the strict minimum required dependencies?

In the gentoo env:
  schroot then build package using a native toolchain mode

#Use gentoo generated package,

Win32/OSX:
  - build package by package, upload them one by one
  - generate a full sdk out of all external dependencies
  - allow getting binary package from the buildfarm

we can build package with cmake recipes

This could be a temporary transition: use current -pc repo to generate
qitoolchain compatible package


toolchain create old-linux32

#for convenience
#toolchain-old-linux32 is toolchain -t old-linux32

#generated from toolchain-pc
toolchain-old-linux32 install toolchain-pc

#generated from nonfree
toolchain-old-linux32 install nonfree-pc

toolchain-old-linux32 install qt-pc

toolchain-old-linux32 install protobuf
toolchain-old-linux32 install zeromq




qibuild -c 'nao-geode'
=>

qibuild-nao-geode  => nao-geode build
qibuild => native build


qitoolchain create 'mingw32'
=>
.toc/toolchain/mingw32


qitoolchain add 'zeromq'
=> .toc/toolchain/mingw32/zeromq.zip
   toolchain/mingw32/{include,lib}


qibuild init
qibuild add
qibuild config

qibuild cmake
qibuild make
qibuild install
