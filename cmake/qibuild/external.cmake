##
## Author(s):
##  - Cedric <gestes@aldebaran-robotics.com>
##
## Copyright (C) 2010, 2011 Aldebaran Robotics
##


if(${CMAKE_VERSION} VERSION_LESS 2.8.3)
  include(${QI_ROOT_DIR}/upstream-backports/ExternalProject.cmake)
else()
  include(ExternalProject)
endif()


#! QiBuild External
# =================

#!
# This modules allow building external projects
# install rules are autogenerated.

#! compile an autotools based project
# \arg:name the name of the project
# \arg:url the url of the project to download. (could start with http:// or file://)
# \param:MD5 the md5 of the specified file
# \group:PATCH a list of patch to apply before building
# \group:CONFIGURE_OPTIONS optional configure options
# \group:INSTALL_OPTIONS arguments to pass to the install command
function(qi_build_autotools name url)
  cmake_parse_arguments(ARGS "" "MD5" "PATCH;INSTALL_OPTIONS;CONFIGURE_OPTIONS" ${ARGN})

  set(options)
  list(APPEND options "${ARGS_CONFIGURE_OPTIONS}")

  set(patchs_cmd)
  foreach(p ${ARGS_PATCH})
    list(APPEND patchs_cmd "patch" "-p1" "<" "${p}" ";")
  endforeach()

  ExternalProject_Add(${name}
    URL               "${url}"
    URL_MD5           "${ARGS_MD5}"
    PREFIX            "${name}"
    BUILD_IN_SOURCE   1
    PATCH_COMMAND     "${patchs_cmd}"
    CONFIGURE_COMMAND "./configure" --prefix=/. ${options}
    INSTALL_COMMAND   "DESTDIR=${QI_SDK_DIR}" make install ${ARGS_INSTALL_OPTIONS}
    )

  #generate install rules for the project
  qi_install_external_project()
endfunction()


#! compile a cmake based project
# \arg:name the name of the project
# \arg:url the url of the project to download. (could start with http:// or file://)
# \param:MD5 the md5 of the specified file
# \group:PATCH a list of patch to apply before building
# \group:CMAKE_FLAGS optional cmake flags
function(qi_build_cmake name url)
  cmake_parse_arguments(ARGS "" "MD5" "PATCH;CMAKE_ARGS" ${ARGN})

  set(patchs_cmd)
  foreach(p ${ARGS_PATCH})
    list(APPEND patchs_cmd "patch" "-p1" "<" "${p}" ";")
  endforeach()

  ExternalProject_Add(${name}
  URL "${url}"
  URL_MD5 "${ARGS_MD5}"
  PREFIX "${name}"
  BUILD_IN_SOURCE 0
  PATCH_COMMAND "${patchs_cmd}"
  CMAKE_ARGS "${ARGS_CMAKE_ARGS}"
  INSTALL_COMMAND   "DESTDIR=${QI_SDK_DIR}" make install ${ARGS_INSTALL_OPTIONS}
  )

  #generate install rules for the project
  qi_install_external_project()
endfunction()

#! install all files related to an autotools like project.
function(qi_install_external_project)
  get_filename_component(_THIS_DIR ${CMAKE_CURRENT_LIST_FILE} PATH)
  set(SOURCE_FOLDER "${QI_SDK_DIR}")
  set(QI_BUILD_DIR  "${QI_BUILD_ROOT_DIR}")
  configure_file("${QI_TEMPLATE_DIR}/install_autotools.cmake"
                 "${CMAKE_CURRENT_BINARY_DIR}/install_autotools.cmake"
                 @ONLY)

  #each component should be specified, otherwize it's not possible to install
  #a single component. (look at the generated cmake_install.cmake to understand)
  install(SCRIPT "${CMAKE_CURRENT_BINARY_DIR}/install_autotools.cmake" COMPONENT lib)
  install(SCRIPT "${CMAKE_CURRENT_BINARY_DIR}/install_autotools.cmake" COMPONENT static-lib)
  install(SCRIPT "${CMAKE_CURRENT_BINARY_DIR}/install_autotools.cmake" COMPONENT binary)
  install(SCRIPT "${CMAKE_CURRENT_BINARY_DIR}/install_autotools.cmake" COMPONENT conf)
  install(SCRIPT "${CMAKE_CURRENT_BINARY_DIR}/install_autotools.cmake" COMPONENT data)
  install(SCRIPT "${CMAKE_CURRENT_BINARY_DIR}/install_autotools.cmake" COMPONENT doc)
  install(SCRIPT "${CMAKE_CURRENT_BINARY_DIR}/install_autotools.cmake" COMPONENT python)
endfunction()
