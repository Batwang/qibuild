QiBuild
=======
Cedric GESTES <cgestes@aldebaran-robotics.com>

Introduction
------------
QiBuild aims to make compilation of your sources easy. It manages
dependencies between projects and supports easy cross-compilation.
By default QiBuild use libraries provided by your system, but you
can use QiToolchain to get a toolchain if you dont want to build
with your system libraries or want to cross-compile.

QiBuild is composed of three parts:

* the QiBuild CMake framework, that simplify CMakeLists.txt writing.
* the qibuild command line program, that allows build a project taking dependencies
   into account.
* the qitoolchain command line program, that fetches binary packages from server.

QiBuild Manual
--------------
link:qibuild-manpage.html[qibuild manpage]

QiBuild CMake API
-----------------

link:tutorials.html[tutorials]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
General consideration about the sdk concept. This documentation explain
the global mecanism behind sdk. You will find information on the
directory structure, how file are searched and organise.

link:target.html[QiBuild Target]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Functions for creating targets. This include binaries, scripts and libraries.

* link:target.html#_qi_create_bin[qi_create_bin]
* link:target.html#_qi_create_lib[qi_create_lib]
* link:target.html#_qi_create_script[qi_create_script]


link:submodule.html[QiBuild Submodule]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Submodule represent a group of sources and dependencies. They help
have clean separated CMakeLists.txt when creating big libraries or
binaries.

* link:submodule.html#_qi_submodule_create[qi_submodule_create]
* link:submodule.html#_qi_submodule_add[qi_submodule_add]

link:log.html[QiBuild Log]
~~~~~~~~~~~~~~~~~~~~~~~~~
Simple module to display log messages.

* link:log.html#_qi_debug[qi_debug]
* link:log.html#_qi_verbose[qi_verbose]
* link:log.html#_qi_info[qi_info]
* link:log.html#_qi_deprecated[qi_deprecated]
* link:log.html#_qi_warning[qi_warning]
* link:log.html#_qi_error[qi_error]

link:tests.html[QiBuild Test]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Interface gtest with ctest.

* link:tests.html#_qi_create_gtest[qi_create_gtest]
* link:tests.html#_qi_add_gtest[qi_add_gtest]

link:uselib.html[QiBuild UseLib]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Simple dependencies handling functions.

* link:uselib.html#_qi_uselib[qi_uselib]

link:launcher.html[QiBuild Launcher]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create launcher that define proper path (python, libraries, ..) to launch targets.

* link:launcher.html#_qi_create_launcher[qi_create_launcher]
* link:launcher.html#_qi_create_insource_launcher[qi_create_insource_launcher]

link:stage.html[QiBuild Stage]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Stage executable and libraries to make them available to the outside world!

* link:stage.html#_qi_stage_lib[qi_stage_lib]
* link:stage.html#_qi_stage_bin[qi_stage_bin]
* link:stage.html#_qi_stage_script[qi_stage_script]
* link:stage.html#_qi_stage_header[qi_stage_header]

link:subdirectory.html[QiBuild SubDirectory]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Conditionally include a subdirectory.

* link:subdirectory.html#_qi_add_subdirectory[qi_add_subdirectory]

link:install.html[QiBuild Install]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Install functions.

* link:install.html#_qi_install_data[qi_install_data]
* link:install.html#_qi_install_doc[qi_install_doc]
* link:install.html#_qi_install_header[qi_install_header]
* link:install.html#_qi_install_conf[qi_install_conf]
* link:install.html#_qi_install_cmake[qi_install_cmake]
* link:install.html#_qi_install_target[qi_install_target]
* link:install.html#_qi_install_program[qi_install_program]

link:sdk.html[QiBuild SDK]
~~~~~~~~~~~~~~~~~~~~~~~~~~
Find and use external projects provided by external sdk. (sources or binaries)

* link:sdk.html#_qi_include_sdk[qi_include_sdk]
