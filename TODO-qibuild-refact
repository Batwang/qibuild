* use qisys.ui.info_count everywhere

* parser.get_* functions should be usable with **kwargs too:

  def get_worktree(args=None, **kwargs):
    options = dict()
    if args:
      options = vars(args[0])
    else:
      options = kwargs

  or just make something more explicit ...

* XMLParser.xml_elem() -> dump()
* XMLParser._write_foo()  -> _dump_foo()

* add --reverse-deps

* rewrite qibuild.config using XMLParser

* rename qibuild.config -> qibuild.xml_config ?

* remove qitoolchain.get()

* remove qitoolchain.remote

* choose between destdir and dest_dir

* `qibuild config` should list the available build profiles

* remove `--quiet-commands`

* add group for every action parser

* fix all doc strings ...

* handle custom build dir

* handle custom sdk dir ?

* remove qibuild.configstore, use XML for toolchain
  storage

* re-add qisrc foreach -p


* qibuild_action("configure")
  -> qibuild_action.call("configure") ?
  -> qibuild_action.configure("...") ?

* qibuild deploy: fix gdb config files generation

* remove qisrc snapshot --manifest

* always check CMake correctness (find_package(qibuild) *after* project)
  > maybe this could be done in CMake instead ...

* add a "path" type in argparse so that (on windows at least) we:
    - always convert to lower case
    - check for forbiddin characters
  write a test for #11255

* get rid of qibuild test ``--slow``, this makes no sense: the
  list of tests and wether they are nightly or not is managed from cmake

* add qibuild test --failed

* remove worktree args from actions, just build then on
  the fly when needed

* also ?

    class GitWorkTree():
      def __init__(self, worktree=None):
          if not eorktree:
          else:
            self.worktree = worktree

    class WorkTree():
      def __init__(self, root=None):
        if not root:
          self.root = os.getcwd()
        else:
          sel.root = root

* replace interact.ask_choice(retrun_int) with
  ask_choice(message, choices, display_fun, allow_none=False)
  (calling display_fun on each choice to display them
  to the user, returning either an element from the choices
  list, or None if the user did not enter anything and allow_none is True)

* use qibuild.project.get_build_dirs() for qibuild find -a

* to help qisrc manifest --check:

  * WorkTreeSyncer should not sync in ctor, ctor should only do some parsing
    and some checks  (which is nice for qisrc manifest --check)

  * WorkTreeSyncer.configure_manifest() should only do some parsing

* WorkTreeSyncer.sync_manifests -> worktree_syncer.sync_repos()
  (Makes more sense)

* qisrc sync output should look like:

   :: Updating manifests
     * default groups: qimessaging, core

   :: Computing work to do:
      * 3 to be added, 2 to be removed, 1 to be moved

      * (1/3) Adding ...
      * (2/3) Adding ...

    :: 4 projects need new configuration:

      * (1/1) Updating bar
          *  Configuring bar for code review ... [ok]
