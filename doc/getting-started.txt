Getting Started
===============


In this tutorial, you will learn how to install and configure the
qiBuild system.


Requirements
------------

Python 2.7 is the preferred version, but qiBuild should work
fine on python 2.6, too.

CMake version 2.8.3 is the preferred version, but you should
not have any problem with CMake 2.6.

On windows, to use scripts written in Python, you have to put
C:\Python2.x and c:\Python2.x\Scripts in your %PATH%.



Installation
------------

Linux, mac
~~~~~~~~~~

Simply run:

----
sudo ./install-qibuild.sh
----

Windows
~~~~~~~

Just run install-qibuild.bat

If you have bash available on your system,
and want to use qiBuild from there, you should
also be able to use the .sh script.


Creating a work tree
--------------------


First you need to chose a qibuild "worktree".

This path will be the root from where qiBuild searches to find
the sources of your projects.

In the following document, we will call this worktree QI_WORK_TREE.

Then go to this directory and run:

----
qibuild init
----

This will create a new qiBuild configuration file in
your working directory, in QI_WORK_TREE/.qi/build.cfg


Configuring qiBuild
-------------------

You can skip this section if you want to build with Unix Makefiles.

If it is not the case, you will have to edit the configuration file
QI_WORK_TREE/.qi/build.cfg

The configuration file can also be generated by using:

----
qibuild init --interactive
----

and then answering the questions

Configuring qiBuild for Visual Studio
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You will have to do several things for qiBuild to work with
visual studio.

* Make sure CMake is in the %PATH%.

* Make sure CMake uses the proper generator.

Here's what a complete .qi/build.cfg would look like
to use Visual Studio 2008:

[source, ini]
----
[general "env"]
  path = C:\Program Files\CMake 2.8\bin;

[general "build"]
  cmake_generator = "Visual Studio 9 2008"
----

For command line addicts, you can also:

* Use cmake_generator = "NMake Makefiles" and use qibuild from the
Visual Studio command prompt.

* Or, if you do not want to use the Visual Studio command prompt,
you can specify a .bat file to be ran by qibuild, like this:

[source, ini]
----
[general "env"]
bat_file = c:\Program Files\Microsoft Visual Studio 9.0\VC\vcvarsall.bat

[general "build"]
cmake_generator = "NMake Makefiles"
----

(the location of the .bat file depends on your setup)


Configuring qiBuild for MinGW with Msys
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You will have to do several things for qibuild to work with
MinGW.

* Set PATH properly so that make.exe and gcc.exe are found

* Make sure CMake uses the correct generator,

Here's what a complete .qi/build.cfg would look like to use
MinGW:

[source, ini]
----
[general "env"]
path = C:\Mingw\bin;C:\MinGW\msys\1.0\bin;

[general "build"]
  cmake_generator = "Unix Makefiles"
----

Note: here you have to setup a complete msys environnement before
being able to use qibuild.

You should also have cmake.exe in your %PATH%.


Configuring qiBuild for MinGW and QtCreator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Here, you do not have to install msys or mingw at all.

Simply get the latest qtcreator and install it.

(you only need the qtcreator package, no need for the full-fledged
Qt SDK)

QtCreator already comes with a pre-packaged mingw, you just
have to tell qibuild to use it.

* add the path to QtCreator's mingw in you %PATH% so that QtCreator can find
mingw32-make without running qmake:

(Using the configuration panel, set PATH to C:\qt\qtcreator\MinGW\bin)

* tell qibuild to use mingw Makefile

Here's what a complete .qi/build.cfg would look like to use
MinGW with QtCreator:

[source, ini]
----
[general "env"]
path = C:\Qt\Qtcreator\MinGw\bin;

[general "build"]
  cmake_generator = "MinGW Makefiles"
----

You should also have cmake.exe in your %PATH%.




link:creating-a-project.html[Next]: create a project
