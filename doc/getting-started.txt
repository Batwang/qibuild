Getting Started
===============


In this tutorial, you will learn how to configure and build a
C++ project using the qiBuild framework.


Requirements
------------


Python 2.7 is the preferred version, but qiBuild should work
fine on python 2.6, too.

CMake version 2.8.3 is the preferred version, but you should
not have any problem with CMake 2.6.

*** CLARIFY procedure for linux/windows/osx, we dont want users to setup PATH,
maybe just call ./install-wrapper.sh ? or easy_install qibuild ? ***
Be sure PYTHONPATH is set to /path/to/qibuild/python and
that  qibuild (from /path/to/qibuild/bin/qibuild) is in PATH.



Creating a work tree
--------------------


First you need to chose a qibuild "worktree".

This path will be searched by qibuild to find the sources
of your projects.

In the following document, we call this worktree QI_WORK_TREE.

Then go to this directory and run:

[source, bash]
----
qibuild init
----

This will create a new qibuild configuration file in
your working directory, in QI_WORK_TREE/.qi/build.cfg


Configuring qiBuild
-------------------

You can skip this section if you want to build with Unix Makefiles.

If it is not the case, you will have to edit the configuration file
QI_WORK_TREE/.qi/build.cfg

The configuration file can also be generated by using:

[source, bash]
----
qibuild init --interactive
----

and then answering the questions

Configuring qiBuild for Visual Studio
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You will have to do several things for qibuild to work with
visual studio.

* Make sure CMake is in the %PATH%.

* Make sure CMake uses the proper generator.

Here's what a complete .qi/build.cfg would look like
to use Visual Studio 2008:

[source, ini]
----
[general "env"]
  path = C:\Program Files\CMake 2.8\bin;

[general "build"]
  cmake_generator = "Visual Studio 9 2008"
----

For command line addicts, you can also:

* Use cmake_generator = "NMake Makefiles" and use qibuild from the
Visual Studio command prompt.

* Or, if you do not want to use the Visual Studio command prompt,
you can specify a .bat file to be ran by qibuild, like this:

[source, ini]
----
[general "env"]
bat_file = c:\Program Files\Microsoft Visual Studio 9.0\VC\vcvarsall.bat

[general "build"]
cmake_generator = "NMake Makefiles"
----

(the location of the .bat file depends on your setup)


Configuring qiBuild for MinGW
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You will have to do several things for qibuild to work with
MinGW.

* Set PATH properly so that make.exe and gcc.exe are found

* Make sure CMake uses the correct generator,

Here's what a complete .qi/build.cfg would look like to use
MinGW:

[source, ini]
----
[general "env"]
path = C:\Mingw\bin;C:\MinGW\msys\1.0\bin;

[general "build"]
  cmake_generator = "Unix Makefiles"
----


qiBuild and QtCreator
~~~~~~~~~~~~~~~~~~~~~

* Windows:
  FIXME: document how to use qibuild from QtCreator's command
  prompt
* Linux, mac:
  FIXME : use +qibuild configure+, then make QtCreator point to
  qibuild's build directory


Creating a new project
----------------------


You can then create a new project:

[source, bash]
----
qibuild create foo
----

This will create a new project in QI_WORK_TREE/foo.

Let's have a look at what has been generated:

[source, bash]
----
foo
|__  CMakeLists.txt
|__  main.cpp
|__  qibuild.cmake
|__  qibuild.manifest
----


* main.cpp is just a standard "Hello World"

* CMakeLists.txt : this is a script file that will be read by CMake to generate
makefiles, or Visual Studio solutions.

* qibuild.cmake : this file MUST be included by the CMakeLists.txt to find the qibuild/cmake
framework

* qibuild.manifest : this file MUST be present for qibuild to know how to build the
foo project.




Configuring, building and testing your new project
--------------------------------------------------


Configuring the foo project is done by:
[source, bash]
----
qibuild configure foo
----

This command may be used anywhere under the QI_WORK_TREE directory.

You can also use:

[source, bash]
----
qibuild configure
----

without specifying "foo" if you are anywhere under the foo directory


This will create a build directory in QI_WORK_TREE/foo/build,
and run cmake in this build directory.

(The name of the build directory reflects your plateform and your
configuration, so that you can use different build configurations
wit the same source tree)

Then run:
[source, bash]
----
qibuild make foo
qibuild tests foo
----

This will compile and launch tests on the foo project.




