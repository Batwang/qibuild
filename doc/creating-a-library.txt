Creating a library
==================

This tutorial only convers the most simple way of writing a library.

If you are working in a large project, or wish to re-distribute your library,
you may want to read a link:how-to-write-a-library.html[more in-depth tutorial]


Requirements
------------

We assume you have a +qiBuild+ project containing a executable named +foo+

(You can use +qibuild create foo+) to get such a project.

We are going to write a function called +get_answer()+ that will return an
integer.

Since this function may be used by other people, we are going to put it in a library,
called +answer+

The answer library
------------------


Add the following files into your project:

+answer.h+
[source, c++]
----
 /// Get the meaning of life
 int get_answer();
----

+answer.cpp+
[source, c++]
----
int get_answer()
{
  return 42;
}
----


Then, edit +main.cpp+ to have:

[source, c++]
----
#include <stdio>
#include "answer.h"

int main()
{
  std::cout << "The answer is: " << get_answer() << std::endl;
  return 0;
}
----


Using the answer library
------------------------

In order to use our library in the foo executable, we have to:

 - Find the +answer.h+ file : so we need to add some include directories

 - Create a library named +answer+ with +answer.h+ and +answer.cpp+

 - Link the +foo+ executable with the +answer+ library.


Adding the include directories
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Add the following line to the +CMakeLists.txt+:

[source, cmake]
----
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

----

+CMAKE_CURRENT_SOURCE_DIR+ is a variable that points to the location of the +CMakeLists.txt+ file. This way you don't have to hard-code anything.


Creating the answer library
~~~~~~~~~~~~~~~~~~~~~~~~~~~


Add a call to +qi_create_lib+:

[source, cmake]
----
qi_create_lib(answer answer.h answer.cpp)
----

This creates a static library by default, named +libanswer.a+ on UNIX, and
+answer.lib+ or +answer_d.lib+ on Windows.

It also makes the +answer+ library usable by other targets.


Link the foo executable with the answer library
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Add a call to +qi_use_lib+ :

[source, cmake]
----
qi_use_lib(foo answer)
----

Make sure you call this *after* the call to +qi_create_lib+ - you need
to create a library before using it.


This call does several things:

* It adds a dependency between the +answer+ library and the +foo+ executable

* It makes sure the +foo+ executable is linked with the +answer+ library



Building
--------

You can then build your project.

A few notes:

* On windows, the library will be found in +build/sdk/Debug/answer_d.lib+ if
built in debug, or in +build/sdk/Release/answer.lib+ if built in release.

* On UNIX, the library will be found in +builds/sdk/lib/libanswer.a+

NOTE: on UNIX, you can create a shared library by using +-DBUILD_SHARED_LIBS=ON+

On Windows, the sources need to be patched to use shared library, but this out
of the scope of this documentation.


Conclusion
----------


The final +CMakeLists.txt+ code looks like

[source, cmake]
----
cmake_minimum_required(VERSION 2.6.4)
include(qibuild.cmake)
project(foo)

include_directories(${CMAKE_CURRENT_SOURCE_DIR})
qi_create_lib(answer answer.h answer.cpp)

qi_create_bin(foo main.cpp)
qi_use_lib(foo answer)
----

link:unit-testing.html[Next]: add a unit test
