CMake coding guide
==================

* Keep the length of the line below *80* characters when possible,
  and when it does not hurt readibility, and below *100* characters
  at any case.

* Indentation is made with *two spaces*

* No trailing whitespace are allowed.

* Every text file must be pushed using +UNIX line endings+. (On windows, you are
advised to set +core.autocrlf+ to +true+).

* Never use old CMake syntax code for loop constructs:

[source, cmake]
----

# NO
if(foo)
  ...
else(foo)
  ...
endif(foo)

# YES
if(foo)
  ...
else()
  ...
endif()

----

* Although CMake is rather leniant with case sensitivity, please write every function
*lower-case*, and separate words by *underscores*

[source, cmake]
----
#NO
function(QI_MY_WONDERFUL_FUNCTION)

  ...

endfunction()

#YES
function(qi_my_nice_function)

  ...

endfunction()
----

* Every function in the public API of +qiBuild+ code (i.e: that could en up in
a user cmake code) *must* start with +qi+, other should not start with +qi+ (prefer using _qi for example).

* The link:http://www.cmake.org/cmake/help/cmake-2-8-docs.html#module:CMakeParseArguments[CMakeParseArguments]
module is very useful, please use it.

* Every function in the *public* API *must* have corresponding documentation. It works
a bit like +Doxygen+, but with the asciidoc syntax.

[source, cmake]
----
#! foobar : this function foo then bar! (small description)
#
# this is a long description for the function, the function have two parameters,
# accept two flags, two params and two groups.
#
# Paragraph separated by blank lines
#
# \argn: a list of optional arguments
# \arg:first_arg the first argument
# \arg:second_arg the second argument
# \param:PARAM1 PARAM1 specify the fooness of the function
# \param:PARAM2 PARAM2 should always be 42
# \group:GROUP1 GROUP1 is a list of project to foo
# \group:GROUP2 This group represent optional project to pass to bar
#
function(foobar first_arg second_arg)
  cmake_parse_arguments(ARG "FLAG1;FLAG2" "PARAM1;PARAM2" "GROUP1;GROUP2" ${ARGN})
endfunction()
----

Note the +bang+ in the first line of the documentation of the function.

The rest is straightforward

+\argn+ this represent the all the remaining optional arguments (cmake ${ARGN})

+\arg:<name>+ this represent a function parameter, the name is the name of the parameter you are documenting.

+\flag:<FLAG>+  This represent a boolean value, the flag could be present or not. (see CMakeParseArguments)

+\param:<PARAM>+ indicates a "one-value option" : the keyword must be followed by a value (see CMakeParseArguments)

+\group:<GROUP>+ indicates a "mutli-value option" : the keyword will be followed by a list of values (see CMakeParseArguments)

* When writing a convenience function, not to be used outside, start the name with
an underscore, if you have a whole bunch of internal functions, put them in a
separated file, in the +internal+ subdirectory.

* Use the log functions carefully. The output of +CMake+ must stay minimal
(when it gets too long, it's impossible for the user to see if something went wrong)

* If you run into a +CMake+ warning, *never* ignore it. Fix your code or file a bug report.
(+CMake+ warnings almost always mean there's a nasty bug somewhere)


