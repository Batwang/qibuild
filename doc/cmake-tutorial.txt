CMake Tutorial
==============

Requirements
------------

* CMake
  You should use CMake with a version >= 2.6 (2.8 is the preferred version)

* A compiler. +XCode+ on mac, the +build-essential+ package (or the equivalent) on
linux, +Visual Studio+ on Windows.

* A text editor

Introduction
------------

+CMake+ does not compile anything by itself, it merely generate files.

On UNIX, it is able to generate +Makefiles+, or +Visual Studio+ solutions.

It will not compile anything by itself.

To use +CMake+, you need to have:

- A source directory. The source directory *must* contain a +CMakeLists.txt+
  file at the root.

- A build directory. That's a nice +CMake+ feature : nothing will be generated
  by default inside your source directory, everything will happen in the build
  directory, so this means when something go wrong, you can always delete
  completely the build directory, or even choose a different one to be sure not
  to mix different compilation results.


Basic CMake syntax
~~~~~~~~~~~~~~~~~~

* This example will show you how to write functions, pass arguments and
return values.


[source,cmake]
----
##
# Usage my_function(arg1 arg2 arg3 ...)
# arg1 will be in ${foo} , arg2 in ${bar},
# arg3 ... in ${ARGN}
function(my_function foo bar)
  message(STATUS "first args  ${foo} ${bar}")
  message(STATUS "other args: ${ARGN}")

  # the result is stored in the variable named my_function_res
  # the PARENT_SCOPE is essential.
  set(my_function_res "yes" PARENT_SCOPE)
endfunction(my_function)


# Call my_function with 3 arguments
my_function("spam" "eggs" "baz")

message(STATUS "my function returns ${my_function_res}")
----

If you put this in a file called +foo.cmake+, you can run:

----
cmake -P foo.cmake
----

This should print:

----
  first args: spam eggs
  other args: baz
  my function returns yes
----


Create a binary with CMake
~~~~~~~~~~~~~~~~~~~~~~~~~~


* A simple example could look like

Create a new work directory, an put the following in a file
named +CMakeLists.txt+

[source, cmake]
----
# This line must always be present
cmake_minimum_required(VERSION 2.6)

# Specify the name of the project
project(foo)

# create a executable:
add_executable(my_exe main.cpp)

----

The main.cpp will be a simple file
[source, c++]
----
#include <stdio>

int main()
{
  std::cout << "Hello, world" << std::endl;
}
----

* You can see that we only had to call +add_executable+.
The first argument is the name of the executable we want to build.
+CMake+ will create a +my_exe+ file on UNIX, and a +my_exe.exe+ on
Windows.
The rest of the arguments are simply the sources of the +my_exe+
executable.


* Now run:

[source,bash]
----
cd work
mkdir build/
cd build
cmake ..
make
----

Or, using the GUI:

* Launch the CMake interface.

* In the "Where is the code source" field, select the path to source code.
  There should always be a +CMakeLists.txt+ file in this directory.

* In the "Where to build the binaries" field , select a build directory (usually named "build").

NOTE: you should not use the same directory as the previous one. CMake is
      designed to run "out-of-source" builds.

* Click on the "configure" button. Select the IDE to be used :
  "Visual Studio 8 2005" or "Visual Studio 9 2008" on Windows, or "UNIX
  Makefiles" on Linux and Mac.

* Click on OK.

* On Windows a .sln file will be generated in your build directory, ready to be opened.

* Compile the example project. On Linux and Mac simply "cd" to the build directory and type "make".



Create a library with CMake
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Creating a library is easy.

Add a +my_lib.h+ and a +my_lib.cpp+ in your working directory.

[source, c++]
----
/**
 * foo.h
 */
#ifndef _MY_LIB_H
#define _MY_LIB_H

int foo();

#endif // _MY_LIB_H
----


[source, c++]
----
/**
 * foo.cpp
 */

int foo()
{
  return 42;
}
----

Then add the following in the +CMakeLists+ file:

[source, cmake]
----
add_library(foo foo.h foo.cpp)
----

Then again, the name of the target will be built with the first argument of
+add_library+.

It will be +libfoo.a+ on UNIX, and +foo.lib+ on Windows
