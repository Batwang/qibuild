.. Generated by tools/gen_cmake_doc.py
.. DO NOT EDIT

.. highlight:: cmake


.. _using-submodules:

Using submodules
=================
.. index::
  single: qi_submodule_create

.. _qi_submodule_create:

qi_submodule_create
-------------------


.. code-block:: cmake

  qi_submodule_create(
      name
      [NO_SOURCE_GROUP]
      SOURCE_GROUP <source_group>
      SRC <src> ...
      DEPENDS <depends> ...
      
  )


A submodule is a convenient place to store source paths, dependencies
and public headers. Submodule can be added a library or a module.
Submodules are directly visible in Visual Studio.


**Parameters**

*name*

  The name of the submodule

*NO_SOURCE_GROUP*

  Do not create a source_group

*SOURCE_GROUP*

  By default a source_group with name is created,
  if sourcegroup is specified then the source_group
  name will be name\\sourcegroup

*SRC*

  The list of source to include in the submodule

*DEPENDS*

  The list of dependencies

*submodule*




**Example**

.. literalinclude:: /samples/submodule/CMakeLists.txt
   :language: cmake



.. index::
  single: qi_submodule_add

.. _qi_submodule_add:

qi_submodule_add
----------------


.. code-block:: cmake

  qi_submodule_add(
      name
      [NO_SOURCE_GROUP]
      SOURCE_GROUP <source_group>
      IF <if>
      SRC <src> ...
      DEPENDS <depends> ...
  )

This function is similar to qi_submodule_create but appends content to
the submodule. This function can be condionnal, if you specify IF
then the content will be appended to the submodule only if the flags
are defined.


**Parameters**

*name*

  The name of the submodule

*NO_SOURCE_GROUP*

  Do not create a source_group.

*SOURCE_GROUP*

  By default a source_group with name is created,
  if sourcegroup is specified then the source_group
  name will be name\\sourcegroup

*IF*

  Condition that should be verified before adding content
  for example (WITH_QT)

*SRC*

  The list of sources to include in the submodule

*DEPENDS*

  The list of dependencies




