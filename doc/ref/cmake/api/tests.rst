.. Generated by tools/gen_cmake_doc.py
.. DO NOT EDIT

.. highlight:: cmake

Testing
========

This CMake module provides functions to interface gtest with ctest.

.. index::
  single: qi_add_test

.. _qi_add_test:

qi_add_test
-----------


.. code-block:: cmake

  qi_add_test(
      test_name
      target_name
      TIMEOUT <timeout>
      ARGUMENTS <arguments> ...
  )

Add a test using a binary that was created by qi_create_bin
The only difference with the CMake method add_test() is that qi_add_test will deal with
the fact that the the binary is in the sdk/bin directory, and than it is named
with _d on visual studio.


**Parameters**

*test_name*

  The name of the test

*target_name*

  The name of the binary to use

*TIMEOUT*

  The timeout of the test

*ARGUMENTS*

  Arguments to be passed to the executable




.. index::
  single: qi_create_gtest

.. _qi_create_gtest:

qi_create_gtest
---------------


.. code-block:: cmake

  qi_create_gtest(
      name
      [NO_ADD_TEST]
      [<remaining args> ...]
      TIMEOUT <timeout>
      SRC <src> ...
      DEPENDS <depends> ...
      ARGUMENTS <arguments> ...
  )

This compiles and add_test's a CTest test that uses gtest.
(so that the test can be run by CTest)
When run, the CTest test outputs an xUnit xml file in
${CMAKE_SOURCE_DIR}/test-results/${test_name}.xml
The name of the test will always be the name of the target.


**Parameters**

*name*

  name of the test

*NO_ADD_TEST*

  Do not call add_test, just create the binary

*remaining args*

  source files, like the SRC group, argn and SRC will be merged

*TIMEOUT*

  The timeout of the test

*SRC*

  Sources

*DEPENDS*

  Dependencies to pass to use_lib

*ARGUMENTS*

  Arguments to pass to add_test (to your test program)




