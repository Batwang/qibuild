Using toolchains
================

In this tutorial, you will learn how to
build your projects using pre-compiled packages.


Requirements
------------

The requirements for this tutorial are the same as in link:managing-deps.html[Managing dependencies between projects].

You should have:

 * a properly configured QiBuild worktree
 * two projects, world and hello, with hello depending on the world library.


The goal of this tutorial is to manage to compile hello, using a pre-compiled binary of
world.


Creating the world package
--------------------------

Generating a package for the world project is done with:

[source, bash]
----
qibuild package world
----

This will create a package named hello.tar.gz in +QI_WORK_TREE+/package/hello.tar.gz
(or hello.zip on windows)

Inside the package, you'll have:

[source, bash]
----
world
|__ include
    |__ world
       |__ world.h
    lib
       |__ libworld.so
    share
      cmake
        |__ world-config.cmake
----

The LFS hierarchy is still preserved, and it is the same as in
build/sdk.

The world-config.cmake is a standard CMake file, but it can be used even
*after* installing the world package, because it only uses relative paths.

So the world package is usable anywhere.

Note that the world-config.cmake does not even requires qibuild to be used by an other
CMake project, all it does is calling standard CMake functions.



Using a toolchain
-----------------

First, you have to create a "toolchain" dir for qibuild to use:

[source, bash]
----
qitoolchain create linux
----

This will create a directory looking like:
+~/.local/share/qi/toolchains/rootfs/linux/+

This is where every packages corresponding to the "linux" toolchain will be put.

Now you can use:

[source, bash]
----
qitoolchain add linux /path/to/worktree/package/world.tar.gz
----

This will simply:
 * copy the world package somewhere in you toolchain directory.
 * configure the file +~/.config/qi/toolchain.cfg+ so that qibuild knows
 that the "linux" toolchain can provide the "world" package


When resolving dependencies of the hello project, qibuild will see that you use
a toolchain called "linux", and that this toolchain provides the hello project,
so it's enough to set CMAKE_MODULE_PATHS to +path/to/linux/toolchain/world+

The +world+ project will not be built when you use +qibuild make hello+, unless
you specify it explicitly on the command line:

[source, bash]
----
qibuild make world hello
----


Using a toolchain for cross-compilation
---------------------------------------


FIXME !


Not covered in this document (yet?)
----------------------------------

* How to create "feeds":

A feed is just an url pointing to a simple configuration files,
which contains a list of packages and their URL.

By maintaining the feeds and the list of packages on a web server,
you can share packages between developers, have them upgrade the
package's versions, and so on.





